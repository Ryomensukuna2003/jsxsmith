generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Simplified User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  createdAt     DateTime  @default(now())
  
  // Your app-specific relations
  appSessions   AppSession[]
}

// Your App-Specific Models
model AppSession {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  name      String?
  chats     Chat[]
  snapshots CodeSnapshot[]
  uiState   UIState[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Chat {
  id            String          @id @default(uuid())
  appSession    AppSession      @relation(fields: [appSessionId], references: [id], onDelete: Cascade)
  appSessionId  String
  role          ChatRole
  message       String
  createdAt     DateTime        @default(now())
  codeSnapshot  CodeSnapshot?
}

enum ChatRole {
  user
  ai
}

model CodeSnapshot {
  id           String     @id @default(uuid())
  appSession   AppSession @relation(fields: [appSessionId], references: [id], onDelete: Cascade)
  appSessionId String
  chat         Chat       @relation(fields: [chatId], references: [id])
  chatId       String     @unique
  jsxCode      String?
  cssCode      String?
  createdAt    DateTime   @default(now())
}

model UIState {
  id           String     @id @default(uuid())
  appSession   AppSession @relation(fields: [appSessionId], references: [id], onDelete: Cascade)
  appSessionId String
  state        Json
  updatedAt    DateTime   @updatedAt
}


